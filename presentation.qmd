---
title: "Customizing graphs<br>with R and ggplot2"
subtitle: "Data Visualization Meetup Munich"
format: 
  revealjs:
    logo: theme/logo.png
    width: 100%
    progress: true
    theme: [theme/theme.scss]
    transition: fade
    transition-speed: fast
    auto-play-media: true
    footer: "Data Visualization Meetup Munich | July 8th, 2025 | Ansgar Wolsing"
    title-slide-attributes:
      data-background-image: theme/background-image.png
      data-background-size: 100%, cover
      data-background-position: 0%, 100%
---

## What happened so far

```{css}
div.video-js {
  background-color: transparent
}
```

{{< video media/slides-dataviz-meeting-muc-2024.mov width="auto" height="620" aspect-ratio="4x3" autoplay muted loop controlBar={false} >}}

## ![Chart](media/09-all-too-well.png){height="720px"} {.center}

## 

::: chart-title-only
:::

```{css}

.chart-title-only {
    width: 100%; 
    padding-bottom: 17%; 
    background-image: url('media/09-all-too-well.png'); /
    background-repeat: no-repeat;
    background-size: 100% auto; 
    background-position: top center;  
    overflow: hidden;
    border: 1px solid #ccc; 
}

```

##  {transition="fade"}

::: chart-first-decade-with-title
:::

```{css}

.chart-first-decade-with-title {
    width: 100%; 
    padding-bottom: 43%; 
    background-image: url('media/09-all-too-well.png'); /
    background-repeat: no-repeat;
    background-size: 100% auto; 
    background-position: top center;  
    overflow: hidden;
    border: 1px solid #ccc; 
}

```

## Inspiration

![](media/clipboard-3275579236.png){height="600px"}

## There's a continuum of dataviz tools

![](media/charting-continuum.png){.center height="500px"}

<div>
<p style="font-size: 14pt; font-style:italic">
Source: Schwabish (2021)
</p>
</div>

## Why creating charts with code?

```{css}
div.column-with-bg {
  background-color: rgb(0, 0, 0, 0.08);
  font-size: 0.8em;
  margin: 8px;
  padding: 8px;
  border-radius: 7px;
  width: 30%;
  height: 350px;
}
```

::: columns
::: {.column .column-with-bg}
**Reproducibility**

Every step is explicit and repeatable
:::

::: {.column .column-with-bg}
**Customization**

fine-tune, create non-standard charts, share standards programmatically
:::

::: {.column .column-with-bg}
**Automation**

create functions for repeated tasks
:::
:::

## ggplot2 at a glance

::: {style="margin-bottom: -150px !important; padding-bottom: 0px !important"}
Implementation of the Grammar of Graphics (Wilkinson 2005) in R ("gg")
:::

```{r, echo=FALSE}
library(tidyverse)
library(ggforce)

shape <- data.frame(
  x = c(0, 1, 1.5, 0.5, 0),
  y = c(1, 1, 0, 0, 1)
)

number_of_shapes <- 7
overlap_factor <- 0.3

shapes <- tibble(
  id = seq_len(number_of_shapes),
  shape = rep(list(shape), number_of_shapes)
) |> 
  unnest(cols = shape) |> 
  mutate(y2 = y + (id - 1) * (1 - overlap_factor))
  
layers <- data.frame(
  id = seq_len(number_of_shapes),
  y = (seq_len(number_of_shapes) - 1) * (1 - overlap_factor),
  name = c("Data", "Aesthetics", "Layers", "Scales", "Facets", 
              "Coordinate system", "Theme")
)

color_mapping <- MetBrewer::met.brewer("Moreau")[seq_len(number_of_shapes)]
names(color_mapping) <- as.character(seq_len(number_of_shapes))

reveal_gg_layers <- function(x) {
  stopifnot(max(x) <= nrow(shapes) & max(x) <= nrow(layers))
  ggplot() +
  geom_shape(
    data = filter(shapes, id %in% {{x}}), 
    aes(x = x, y = y2,
        fill = factor(id, levels = seq_len(number_of_shapes))),
    alpha = 0.6) +
  coord_cartesian(xlim = c(0, 2.5), ylim = c(0, number_of_shapes + 1)) +
  geom_text(
    data = layers[x, ],
    aes(x = 1.6, y = y, label = name,
        color = factor(id, levels = seq_len(number_of_shapes))),
    hjust = 0, vjust = -0.2, size = 9, family = "Poppins SemiBold"
    ) +
  scale_fill_manual(values = color_mapping,
                    aesthetics = c("fill", "color")) +
  guides(color = "none", fill = "none") +
  theme_void() +
  theme(
    plot.background = element_rect(color = "transparent", fill = "transparent"),
    panel.background = element_rect(color = "transparent", fill = "transparent")
  )
}

```

## ggplot2 at a glance

::: {style="margin-bottom: -150px !important; padding-bottom: 0px !important"}
Implementation of the Grammar of Graphics (Wilkinson 2005) in R ("gg")
:::

::: r-stack
```{r, echo=FALSE, include=TRUE, warning=FALSE, message=FALSE, fig.height=6.5, out.height="100%", dev="png", dev.args=list(bg="transparent")}
reveal_gg_layers(1)
```

```{r, echo=FALSE, include=TRUE, warning=FALSE, message=FALSE, fig.height=6.5, out.height="100%", dev="png", dev.args=list(bg="transparent"), class="fragment"}
reveal_gg_layers(2)
```

```{r, echo=FALSE, include=TRUE, warning=FALSE, message=FALSE, fig.height=6.5, out.height="100%", dev="png", dev.args=list(bg="transparent"), class="fragment"}
reveal_gg_layers(3)
```

```{r, echo=FALSE, include=TRUE, warning=FALSE, message=FALSE, fig.height=6.5, out.height="100%", dev="png", dev.args=list(bg="transparent"), class="fragment"}
reveal_gg_layers(4)
```

```{r, echo=FALSE, include=TRUE, warning=FALSE, message=FALSE, fig.height=6.5, out.height="100%", dev="png", dev.args=list(bg="transparent"), class="fragment"}
reveal_gg_layers(5)
```

```{r, echo=FALSE, include=TRUE, warning=FALSE, message=FALSE, fig.height=6.5, out.height="100%", dev="png", dev.args=list(bg="transparent"), class="fragment"}
reveal_gg_layers(6)
```

```{r, echo=FALSE, include=TRUE, warning=FALSE, message=FALSE, fig.height=6.5, out.height="100%", dev="png", dev.args=list(bg="transparent"), class="fragment"}
reveal_gg_layers(7)
```
:::

# Let's dive into the code

## Load the required libraries

```{r, echo=FALSE}
library(showtext)
font_add_google("Poppins")
font_add_google("Roboto Mono")
font_add_google("Roboto Condensed")
font_add_google("Raleway")
font_add("Raleway SemiBold", regular = "Raleway-SemiBold.ttf")
showtext_auto()
showtext_opts(dpi = 300)

```

```{r, echo=TRUE, cache=FALSE, `code-line-numbers`="1,2,3"}

library(tidyverse)
library(ggtext)

```

`library()` loads R packages into the R session.

{ggplot2} is part of the {tidyverse}

```{r, echo=FALSE, cache=TRUE}

tracks_df <- read_rds(
  file.path("data", "no1-tracks-prepared.rds"))

```

```{r, echo=FALSE}
tracks_df |>
  select(-c(id, href)) |> 
  head() |> 
  gt::gt() |> 
  gt::cols_align("left", artist_song) |> 
  gt::tab_options(
     table.font.names = "Source Sans Pro",
    column_labels.background.color = "#555555",
    column_labels.font.weight = "bold")

```

## Data preparation

Prepare a dataframe with the longest songs per decade. We'll need these for the labels.

```{r, echo=FALSE, cache=TRUE}
start_year <- 1960
df_longest_no1_per_decade <- tracks_df |>
  filter(year(first_no1_date) >= start_year) |> 
  group_by(decade) %>% 
  slice_max(order_by = duration_s, n = 1, with_ties = TRUE) |>
  ungroup() |>
  mutate(
    label = ifelse(
      str_detect(artist_song, "Taylor Swift"), 
      "Taylor Swift - All Too Well",
      artist_song),
    label_wrapped = str_replace(
      label, " - ", "\n"))

df_longest_no1_per_decade |> 
  select(-c(id, href)) |> 
  head(10) |> 
  gt::gt() |> 
  gt::cols_align("left", artist_song) |> 
  gt::tab_options(
     table.font.names = "Source Sans Pro",
    column_labels.background.color = "#555555",
    column_labels.font.weight = "bold")


```

## Our first visualization of the data {auto-animate="true"}

::: columns
::: {.column width="35%"}
```{r, echo=TRUE, eval=FALSE}
ggplot(
  data = df_longest_no1_per_decade,
  mapping = aes(x = label, y = duration_s)) +
  geom_col()
```
:::

::: {.column .fragment width="65%"}
<br><br>

::: r-stack
```{r, echo=FALSE, fig.width=8, fig.height=4.5, out.height="100%", dev="png", dev.args=list(bg="transparent"), class="fragment"}
ggplot(
  data = df_longest_no1_per_decade,
  mapping = aes(x = label_wrapped,
                y = duration_s)) +
  geom_col()
```

```{r, echo=FALSE, fig.width=8, fig.height=4.5, out.height="100%", dev="png", dev.args=list(bg="transparent"), class="fragment"}
ggplot(
  data = df_longest_no1_per_decade,
  mapping = aes(x = label_wrapped,
                y = duration_s)) +
  geom_col() +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1))
```
:::
:::
:::

## Dataviz 101 - *Rotate that damn plot!* {auto-animate="true"}

::: columns
::: {.column width="35%"}
```{r, echo=TRUE, eval=FALSE, `code-line-numbers`="3-4"}
ggplot(
  data = df_longest_no1_per_decade,
  mapping = aes(x = duration_s, 
                y = label_wrapped)) +
  geom_col()
```
:::

::: {.column width="65%"}
<br><br><br>

```{r, echo=FALSE, fig.width=8, fig.height=4.5}
ggplot(
  data = df_longest_no1_per_decade,
  mapping = aes(x = duration_s,
                y = label_wrapped)) +
  geom_col()
```
:::
:::

## We haven't mentioned the decades so far

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE, `code-line-numbers`="6-9"}
p <- ggplot(
  data = df_longest_no1_per_decade,
  mapping = aes(x = duration_s,
                y = label_wrapped)) +
  geom_col() +
  facet_wrap(
    vars(decade),
    ncol = 1, scales = "free_y",
    strip.position = "left")
```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6, fig.height=6}
p
```
:::
:::

## Apply a theme {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE, `code-line-numbers`="9"}
p <- ggplot(
  data = df_longest_no1_per_decade,
  mapping = aes(x = duration_s,
                y = label_wrapped)) +
  geom_col() +
  facet_wrap(
    vars(decade),
    ncol = 1, scales = "free_y",
    strip.position = "left") +
  theme_minimal()
```

::: {style="font-size: 0.6em;margin-top: 55px"}
{ggplot2} contains a couple of different themes out of the box that you can apply to your plot, e.g.:

-   `theme_bw()`
-   `theme_light()`

\+ additional packages available
:::
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6, fig.height=6}
p
```
:::
:::

## Switch the song titles to the right {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE, `code-line-numbers`="6"}
p <- ggplot(
  data = df_longest_no1_per_decade,
  mapping = aes(x = duration_s,
                y = label_wrapped)) +
  geom_col() +
  scale_y_discrete(position = "right") +
  facet_wrap(
    vars(decade),
    ncol = 1, scales = "free_y",
    strip.position = "left") +
  theme_minimal()
```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6, fig.height=6}
p
```
:::
:::

## Chart title and labels {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE, `code-line-numbers`="11-16"}
p <- ggplot(
  data = df_longest_no1_per_decade,
  mapping = aes(x = duration_s, 
                y = label_wrapped)) +
  geom_col() +
  scale_y_discrete(position = "right") +
  facet_wrap(
    vars(decade),
    ncol = 1, scales = "free_y",
    strip.position = "left") +
  labs(
    title = "Longest number one song per decade",
    subtitle = "US Billboard Hot 100, song duration (seconds)",
    x = NULL,
    y = NULL
  ) +
  theme_minimal()
```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6, fig.height=6}
p
```
:::
:::

## More theming {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p +
  theme_minimal(
    base_family = "Poppins", base_size = 14) +
  theme(
    strip.text.y.left = element_text(
      angle = 0, family = "Roboto Mono"),
    plot.title = element_text(face = "bold"),
    plot.subtitle = element_markdown(),
    plot.title.position = "plot",
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    panel.spacing.y = unit(0, "mm"),
    axis.text.y.right = element_text(size = 12)
  )
```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6.5, fig.height=6}
p
```
:::
:::

# What if we wanted to show the distribution?

## Boxplots?

```{r, echo=FALSE}
p_base <- ggplot(
  data = tracks_df,
  mapping = aes(
    x = duration_s, y = factor(decade),
    group = decade)) +
  labs(
    title = "Length of number 1 songs per decade",
    subtitle = "US Billboard Hot 100,
      song duration in seconds",
    x = NULL, y = NULL
  ) +
  theme_minimal(
    base_family = "Poppins", base_size = 14) +
  theme(
    strip.text.y.left = element_text(angle = 0),
    plot.title = element_text(face = "bold"),
    plot.subtitle = element_markdown(),
    plot.title.position = "plot",
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    axis.text.y = element_text(family = "Roboto Mono")
  )
```

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p_base + 
  geom_boxplot()
```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6.5, fig.height=6}
p
```
:::
:::

## Music? Violins! 🎻

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p_base + 
  geom_violin()
```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6.5, fig.height=6}
p
```
:::
:::

## Density-interval combo ("halfeye")? {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
library(ggdist)

p <- p_base + 
  stat_halfeye() 
```

::: {style="font-size: 0.6em;margin-top: 55px"}
{ggdist} provides functions which extended {ggplot2} to visualize...

-   distributions
-   uncertainty
:::
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6.5, fig.height=6}
p
```
:::
:::

## Show every single data point? {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p_base + 
  stat_dots(
    dotsize = 1.2, color = "grey24"
  ) 
```

::: {style="font-size: 0.6em;margin-top: 55px"}
`stat_dots()` is also from the {ggdist} package
:::
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6.5, fig.height=6}
p
```
:::
:::

## Where's <s>Waldo</s>[Taylor?]{style="color: #B14625"} {auto-animate="true"}

::: columns
::: {.column width="50%"}
```{r, echo=FALSE, include=TRUE}
library(ggdist)

highlight_color <- "#B14625"
track_id <- "5enxwA8aAbwZbf5qCHORXi"

p <- p_base + 
  stat_dots(
    dotsize = 1.2,
    color = "grey24"
  ) +
  geom_point(
    data = filter(
      tracks_df, 
      id == track_id),
    size = 9, shape = 21, stroke = 2,
    fill = "transparent",
    color = highlight_color
  )
```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6.5, fig.height=6}
p
```
:::
:::

## Like the Economist (2025)

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- tracks_df |> 
  mutate(
    year = year(first_no1_date),
    duration_min = duration_s / 60) |> 
  ggplot(
  mapping = aes(
    x = year, y = duration_min)
  ) +
  geom_point(
    color = "#F04629",
    alpha = 0.3) +
  geom_smooth(
    method = "loess",
    color = "white", linewidth = 2.2, 
    se = FALSE) +
  geom_smooth(
    method = "loess",
    color = "#DF2124", linewidth = 1.7,
    se = FALSE) +
  geom_point(
    data = ~filter(
      ., 
      id == track_id),
    size = 3, shape = 21, stroke = 1,
    fill = "#F04629",
    color = "black"
  ) +
  geom_richtext(
    data = ~filter(
      ., 
      id == track_id),
    aes(
    label = "<span style='
    font-family: 
    \"Roboto Condensed Medium\"'>Taylor Swift</span><br>All Too Well"),
    size = 5, color = "black",
    family = "Roboto Condensed",
    hjust = 1, nudge_x = -2,
    lineheight = 1.1, label.size = 0,
    fill = NA
  ) +
  scale_x_continuous(
    breaks = seq(1960, 2020, 10)) +
  scale_y_continuous(
    breaks = 0:12
  ) +
  coord_cartesian(ylim = c(0, NA)) +
  labs(
    title = "Turning back time",
    subtitle = "US Billboard Hot 100,
      Length in minutes",
    caption = "Original by The Economist",
    x = NULL, y = NULL
  ) +
  theme_minimal(
    base_family = "Roboto Condensed",
    base_size = 18) +
  theme(
    plot.background = element_rect(
      color = "grey50", fill = "#EBEBDF"
    ),
    plot.title = element_text(face = "bold"),
    plot.subtitle = element_markdown(),
    plot.title.position = "plot",
    panel.grid = element_blank(),
    panel.grid.major.y = element_line(
      color = "#CACABE", linewidth = 0.3
    )
  )

```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6.5, fig.height=6}
p
```
:::
:::

## Let's start creating the plot

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
library(ggbeeswarm)

p <- ggplot(
  data = tracks_df,
  aes(x = factor(decade), 
      y = duration_s)) +
  geom_beeswarm()

```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6.5, fig.height=6}
p
```
:::
:::

## Style the dots

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
greyscale_palette <- c(
  "grey60", "grey55","grey50", "grey45", 
  "grey40", "grey35", "grey30", "grey25"
) 

p <- ggplot(
  data = tracks_df,
  aes(x = factor(decade), 
      y = duration_s)) +
  geom_beeswarm(
    aes(fill = factor(decade)),
    cex = 0.75, shape = 21, 
    col = "white", alpha = 0.95,
    size = 2) +
  scale_fill_manual(
    values = greyscale_palette)

```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6.5, fig.height=6}
p
```
:::
:::

## Rotate the plot and remove the legend

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p +
  coord_flip() +
  guides(fill = "none")

```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6.5, fig.height=7}
p
```
:::
:::

## Add the theme

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p +
  theme_minimal(
    base_family = "Raleway",
    base_size = 13) +
  theme(
  plot.background = element_rect(
    color = "white", fill = "white"),
  panel.grid = element_blank(),
  axis.title.y = element_blank(),
  axis.text.y = element_blank(),
  axis.ticks.x = element_line(
    color = "grey60", linewidth = 0.3),
  text = element_text(
    color = "grey35"),
  plot.title = element_markdown(
    color = "black", 
    family = "Raleway SemiBold", size = 18),
  plot.subtitle = element_textbox(
    margin = margin(t = 6, b = 6),
    lineheight = 1.33,
    size = 12,
    width = unit(1, "npc"), hjust = 0
  ),
  plot.caption = element_markdown()
)

```
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.width=6.5, fig.height=7}
p
```
:::
:::

## Add annotations for the decades

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p +
  # Labels for decades
  annotate(
    "text",
    x = seq_along(seq(1950, 2020, 10)) + 0.3,
    y = 30, 
    label = paste0(seq(1950, 2020, 10), "s"),
    family = "Raleway SemiBold", 
    color = "grey50", size = 6,
    hjust = 0
  )
```
:::

::: {.column width="50%\""}
```{r, echo=FALSE, fig.width=6.5, fig.height=7}
p
```
:::
:::

## Format the x-axis

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p +
  scale_y_continuous(
    position = "right",
    breaks = seq(120, 600, 60),
    labels = c(
      seq(120, 540, 60) / 60,
      "10 min")
  )
```
:::

::: {.column width="50%\""}
```{r, echo=FALSE, fig.width=6.5, fig.height=7}
p
```
:::
:::

## Add annotations for the longest songs

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p +
  ggrepel::geom_text_repel(
    data = df_longest_no1_per_decade,
    aes(label = label),
    size = 3, family = "Raleway", 
    color = "grey30", lineheight = 0.8,
    min.segment.length = unit(0.1, "mm"), 
    segment.size = 0.2, 
    segment.color = "grey50",
    direction = "y", hjust = 0, 
    nudge_y = 40
  ) 
```
:::

::: {.column width="50%\""}
```{r, echo=FALSE, fig.width=6.5, fig.height=7}
p
```
:::
:::

## We can do better

```{r, echo=FALSE}

# Silently remove the geom_text_repel layer
p$layers[3] <- NULL

```

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p +
  ggrepel::geom_text_repel(
    data = filter(
      df_longest_no1_per_decade, 
      id == track_id),
    aes(label = str_wrap(label, 16)),
    size = 4.5, family = "Raleway SemiBold",
    color = highlight_color, lineheight = 0.8,
    min.segment.length = unit(0.1, "mm"), 
    segment.size = 0.2, 
    segment.color = "grey50",
    direction = "y", hjust = 0, 
    nudge_y = -180
  ) +
  ggrepel::geom_text_repel(
    data = filter(
      df_longest_no1_per_decade, 
      id != track_id),
    aes(label = str_wrap(label, 20)),
    size = 3.25, family = "Raleway", 
    color = "grey30", lineheight = 0.8,
    min.segment.length = unit(0.1, "mm"), 
    segment.size = 0.2, 
    segment.color = "grey50",
    direction = "y", hjust = 0, 
    nudge_y = 40
  ) 

```
:::

::: {.column width="50%\""}
```{r, echo=FALSE, fig.width=6.5, fig.height=7}
p
```
:::
:::

## Highlight the longest songs

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p +
  geom_point(
    data = filter(
      df_longest_no1_per_decade,
      id != track_id),
    aes(fill = factor(decade)),
    shape = 21, stroke = 1, 
    color = "grey80", size = 2,
    show.legend = FALSE)  +
  geom_point(
    data = filter(
      df_longest_no1_per_decade,
      id == track_id),
    shape = 21, stroke = 1, 
    color = "grey80", size = 3.5,
    fill = highlight_color,
    show.legend = FALSE) 

```
:::

::: {.column width="50%\""}
```{r, echo=FALSE, fig.width=6.5, fig.height=7}
p
```
:::
:::

## Finally, add the titles

```{r, echo=FALSE}

plot_titles <- list(
  title = glue::glue("<b style='color:{highlight_color}'>All Too Well</b> 
  is the Longest Song in U.S. Chart History"),
  subtitle = "Taylor Swift's new version of
  \"All Too Well\" is the longest track to ever top the Billboard Hot 100 with a duration of 
  10 minutes and 13 seconds. The song replaces **Don McLean's song \"American Pie\"** 
  (8 minutes and 36 seconds), which became no. 1 on 15 January 1972, after nearly 50 years.
  Each no. 1 song is a dot. The longest no. 1 song in each decade is highlighted.",
  caption = "Source: **Billboard Hot 100 (Kaggle), Spotify API** |
    Visualization: **Ansgar Wolsing**")

```

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, include=TRUE}
p <- p +
 labs(
    title = plot_titles$title,
    subtitle = plot_titles$subtitle,
    caption = plot_titles$caption,
    y = "Track duration"
  )

```

<br> Not shown:<br>The titles have been defined in the list object `plot_titles`
:::

::: {.column width="50%\""}
```{r, echo=FALSE, fig.width=6.5, fig.height=7}
p
```
:::
:::

## Resources

::: {style="font-size: 0.6em"}
-   Talk at Data Visualization Meetup Munich March 2024:<br> [github.com/bydata/talk-data-visualization-munich-20240305](https://github.com/bydata/talk-data-visualization-munich-20240305)
-   Full R code:<br> [github.com/bydata/30DayChartChallenge/tree/main/2022/09](https://github.com/bydata/30DayChartChallenge/tree/main/2022/09)
-   {ggplot2} documentation: [ggplot2.tidyverse.org](https://ggplot2.tidyverse.org/)
-   Economist chart: [bsky.app/profile/alexselbyb.bsky.social/post/3lqptoe76jk2e](https://bsky.app/profile/alexselbyb.bsky.social/post/3lqptoe76jk2e)
-   Rick Beato on YouTube: [www.youtube.com/watch?v=aqHePc6Yu7w](https://www.youtube.com/watch?v=aqHePc6Yu7w)
:::

## If you want to stay in touch

![](media/qr-code-linkedin.png){width="500px"}
